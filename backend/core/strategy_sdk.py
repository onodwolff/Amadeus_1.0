from typing import Protocol, Any, Optional, Dict, Literal
from .contracts import OrderBookMsg, TradeMsg

class StrategyContext(Protocol):
    md: Any
    trader: Any
    risk: Any
    storage: Any
    logger: Any
    def emit_metric(self, name: str, value: float, tags: Optional[Dict[str,str]]=None) -> None: ...
    mode: Literal["backtest","paper","live"]
    def now(self) -> int: ...

class StrategyPlugin(Protocol):
    id: str
    schema: Dict[str, Any]
    async def init(self, ctx: StrategyContext, config: Dict[str, Any]) -> None: ...
    async def on_start(self) -> None: ...
    async def on_stop(self) -> None: ...
    async def on_tick(self, symbol: str) -> None: ...
    async def on_book(self, msg: OrderBookMsg) -> None: ...
    async def on_trade(self, msg: TradeMsg) -> None: ...
