from typing import Protocol, Callable, Optional, Dict, Any, Awaitable

Unsub = Callable[[], Awaitable[None]] | Callable[[], None]

class ExchangeAdapter(Protocol):
    id: str
    capabilities: Dict[str, bool]

    async def subscribe_book(self, symbol: str, depth: str, cb: Callable[[Dict[str, Any]], Any]) -> Unsub: ...
    async def subscribe_trades(self, symbol: str, cb: Callable[[Dict[str, Any]], Any]) -> Unsub: ...
    async def get_ohlcv(self, symbol: str, tf: str, since: Optional[int]=None, limit: int=500) -> list[dict]: ...

    async def place_order(self, req: dict) -> dict: ...
    async def cancel_order(self, id_or_client_id: str) -> dict: ...
    async def get_open_orders(self, symbol: Optional[str]=None) -> list[dict]: ...
    async def get_positions(self) -> list[dict]: ...
    async def get_balances(self) -> list[dict]: ...

    async def get_symbol_info(self, symbol: str) -> dict: ...
    def normalize_symbol(self, user_input: str) -> str: ...
